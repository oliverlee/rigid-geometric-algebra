workspace(name = "rigid_geometric_algebra")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

CXX_STANDARD = ["-std=c++23"]

COMMON_CXX_WARNINGS = [
    "-Werror",
    "-Wall",
    "-Wextra",
    "-Wpedantic",
    "-Wconversion",
    "-Wnon-virtual-dtor",
    "-Wold-style-cast",
    "-Wcast-align",
    "-Wunused",
    "-Woverloaded-virtual",
    "-Wmisleading-indentation",
    "-Wnull-dereference",
    "-Wdouble-promotion",
    "-Wformat=2",
    "-Wimplicit-fallthrough",
]

# toolchains_llvm also loads rules_cc but possibly an older version
http_archive(
    name = "rules_cc",
    sha256 = "2037875b9a4456dce4a79d112a8ae885bbc4aad968e6587dca6e64f3a0900cdf",
    strip_prefix = "rules_cc-0.0.9",
    urls = ["https://github.com/bazelbuild/rules_cc/releases/download/0.0.9/rules_cc-0.0.9.tar.gz"],
)

TOOLCHAINS_LLVM_COMMIT = "d04aad361261b1720da07c845aa666331500045c"

http_archive(
    name = "toolchains_llvm",
    integrity = "sha256-is2aQChtDd4j48BZ0edA+Pdy/fZT7qjylvFRlhSKUgg=",
    strip_prefix = "bazel-toolchain-{commit}".format(
        commit = TOOLCHAINS_LLVM_COMMIT,
    ),
    url = "https://github.com/oliverlee/bazel-toolchain/archive/{commit}.tar.gz".format(
        commit = TOOLCHAINS_LLVM_COMMIT,
    ),
)

load("@toolchains_llvm//toolchain:deps.bzl", "bazel_toolchain_dependencies")

bazel_toolchain_dependencies()

load("@toolchains_llvm//toolchain:rules.bzl", "llvm_toolchain")

# https://github.com/bazel-contrib/toolchains_llvm/blob/192cf04bbb11b29a8ca6756e269d27a840bfa14b/toolchain/internal/repo.bzl
llvm_toolchain(
    name = "llvm18_toolchain",
    cxx_flags = {
        "": [
            "-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE",
            "-stdlib=libc++",
            "-Wshadow",
        ] + COMMON_CXX_WARNINGS + CXX_STANDARD,
    },
    # Link UBSan C++ runtime libraries if the `ubsan` feature is enabled
    # https://github.com/bazelbuild/bazel/issues/12797#issuecomment-980641064
    # use `link_libs` to prevent overriding default `link_flags`
    # https://github.com/grailbio/bazel-toolchain/blob/ceeedcc4464322e05fe5b8df3749cc02273ee083/toolchain/cc_toolchain_config.bzl#L148-L150
    link_libs = {
        "": ["-fsanitize-link-c++-runtime"],
    },
    llvm_version = "18.1.8",
)

# register llvm first, it has better error messages
load("@llvm18_toolchain//:toolchains.bzl", "llvm_register_toolchains")

llvm_register_toolchains()

BAZEL_BOOTLIN_COMMIT = "d15e4b4c3a984668d1d6bd5f3ca032efecae5cb1"

http_archive(
    name = "bazel_bootlin",
    integrity = "sha256-kBlWjcV2AXGblkqCNxg1/bs2c6YLrLHqLgSbwsAcCl8=",
    strip_prefix = "bazel_bootlin-{commit}".format(
        commit = BAZEL_BOOTLIN_COMMIT,
    ),
    url = "https://github.com/oliverlee/bazel_bootlin/archive/{commit}.tar.gz".format(
        commit = BAZEL_BOOTLIN_COMMIT,
    ),
)

load("@bazel_bootlin//:defs.bzl", "bootlin_toolchain")

bootlin_toolchain(
    name = "gcc12_toolchain",
    # x86-64-v3 should cover CPUs released after ~2015.
    # see https://www.phoronix.com/news/GCC-11-x86-64-Feature-Levels.
    architecture = "x86-64-v3",
    # see https://toolchains.bootlin.com/releases_x86-64-v3.html
    buildroot_version = "bleeding-edge-2023.08-1",
    extra_cxx_flags = [
        "-fdiagnostics-color=always",
        "-Wduplicated-cond",
        "-Wduplicated-branches",
        "-Wlogical-op",
        "-Wuseless-cast",
        "-Wshadow=compatible-local",
    ] + COMMON_CXX_WARNINGS + CXX_STANDARD,
    libc_impl = "glibc",
)

register_toolchains(
    "@gcc12_toolchain//:toolchain",
)

BAZEL_CLANG_FORMAT_COMMIT = "b6473887d54512becb88bd1985bca110d0193fd3"

http_archive(
    name = "bazel_clang_format",
    integrity = "sha256-eLLwaG09kfljgB0/XCPAKUqHRlo9oQInynnwdmLvOqI=",
    strip_prefix = "bazel_clang_format-{commit}".format(
        commit = BAZEL_CLANG_FORMAT_COMMIT,
    ),
    url = "https://github.com/oliverlee/bazel_clang_format/archive/{commit}.tar.gz".format(
        commit = BAZEL_CLANG_FORMAT_COMMIT,
    ),
)

RULES_CLANG_TIDY_COMMIT = "5736056065d32bbbed50731cbd27da7bcf8ad793"

http_archive(
    name = "rules_clang_tidy",
    integrity = "sha256-BT3EJXA9rz84aRPqlxHRyd7pik8chLRTwcNROedOYy4=",
    strip_prefix = "rules_clang_tidy-{commit}".format(
        commit = RULES_CLANG_TIDY_COMMIT,
    ),
    url = "https://github.com/oliverlee/rules_clang_tidy/archive/{commit}.tar.gz".format(
        commit = RULES_CLANG_TIDY_COMMIT,
    ),
)

load("@rules_clang_tidy//:dependencies.bzl", "rules_clang_tidy_dependencies")

rules_clang_tidy_dependencies()

http_archive(
    name = "buildifier_prebuilt",
    sha256 = "e46c16180bc49487bfd0f1ffa7345364718c57334fa0b5b67cb5f27eba10f309",
    strip_prefix = "buildifier-prebuilt-6.1.0",
    urls = [
        "https://github.com/keith/buildifier-prebuilt/archive/6.1.0.tar.gz",
    ],
)

load("@buildifier_prebuilt//:deps.bzl", "buildifier_prebuilt_deps")

buildifier_prebuilt_deps()

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

load("@buildifier_prebuilt//:defs.bzl", "buildifier_prebuilt_register_toolchains")

buildifier_prebuilt_register_toolchains()

http_archive(
    name = "rules_multirun",
    sha256 = "0e124567fa85287874eff33a791c3bbdcc5343329a56faa828ef624380d4607c",
    url = "https://github.com/keith/rules_multirun/releases/download/0.9.0/rules_multirun.0.9.0.tar.gz",
)

SKYTEST_COMMIT = "306be7acbf16b4a37d8d03ec4e3957b029a6ec79"

http_archive(
    name = "skytest",
    integrity = "sha256-OCEcHYDUL8nQA8dZyLpb+oIDK4nmRN5dzBUPr+sYUzk=",
    strip_prefix = "skytest-{commit}".format(
        commit = SKYTEST_COMMIT,
    ),
    url = "https://github.com/oliverlee/skytest/archive/{commit}.tar.gz".format(
        commit = SKYTEST_COMMIT,
    ),
)
