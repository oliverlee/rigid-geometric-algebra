load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("@rules_multirun//:defs.bzl", "multirun")

alias(
    name = "gcc12_toolchain",
    actual = "@gcc12_toolchain//:toolchain",
)

alias(
    name = "clang19_toolchain",
    actual = select({
        "@platforms//os:macos": "@llvm19_toolchain//:cc-toolchain-aarch64-darwin",
        "@platforms//os:linux": "@llvm19_toolchain//:cc-toolchain-x86_64-linux",
    }),
)

alias(
    name = "ruff",
    actual = select({
        "@platforms//os:macos": "@ruff_aarch64-darwin//:ruff",
        "@platforms//os:linux": "@ruff_x86_64-linux//:ruff",
    }),
)

genrule(
    name = "ruff-workspace-directory",
    srcs = [":ruff"],
    outs = ["ruff-workspace-directory.bash"],
    cmd = """
echo "#!/bin/bash" > $@
echo "cd \\$$BUILD_WORKSPACE_DIRECTORY" >> $@
echo "$(execpath :ruff) \\$$@" >> $@
    """,
)

sh_binary(
    name = "ruff.format.check",
    srcs = ["ruff-workspace-directory.bash"],
    args = [
        "format",
        "--check",
    ],
    data = [":ruff"],
)

sh_binary(
    name = "ruff.format",
    srcs = ["ruff-workspace-directory.bash"],
    args = [
        "format",
    ],
    data = [":ruff"],
)

# https://docs.astral.sh/ruff/rules/
sh_binary(
    name = "ruff.lint",
    srcs = ["ruff-workspace-directory.bash"],
    args = [
        "check",
        "--exit-non-zero-on-fix",
        "--fix",
        "--show-fixes",
    ],
    data = [":ruff"],
)

buildifier(
    name = "buildifier.check",
    lint_mode = "warn",
    mode = "check",
)

buildifier(
    name = "buildifier",
    lint_mode = "warn",
    mode = "fix",
)

genrule(
    name = "gen-clang-format",
    outs = ["clang-format.bash"],
    cmd = """
echo "#!/bin/bash" > $@
echo "cd \\$$BUILD_WORKSPACE_DIRECTORY" >> $@
echo "exec bazel build \\$$@ //..." >> $@
""",
)

sh_binary(
    name = "clang-format.check",
    srcs = ["clang-format.bash"],
    args = [
        "--aspects=@bazel_clang_format//:defs.bzl%check_aspect",
        "--output_groups=report",
        "--keep_going",
    ],
)

sh_binary(
    name = "clang-format",
    srcs = ["clang-format.bash"],
    args = [
        "--aspects=@bazel_clang_format//:defs.bzl%fix_aspect",
        "--output_groups=report",
        "--keep_going",
        "--use_action_cache=false",
    ],
)

multirun(
    name = "format.check",
    commands = [
        ":buildifier.check",
        ":clang-format.check",
        ":ruff.format.check",
    ],
)

multirun(
    name = "format",
    commands = [
        ":buildifier",
        ":clang-format",
        ":ruff.format",
    ],
)

genrule(
    name = "gen-clang-tidy",
    outs = ["clang-tidy.bash"],
    cmd = """
echo "#!/bin/bash" > $@
echo "cd \\$$BUILD_WORKSPACE_DIRECTORY" >> $@
echo "exec bazel build {options} \\$${{@:-//...}}" >> $@
""".format(
        options = " ".join([
            "--extra_toolchains=//tools:clang19_toolchain",
            "--aspects=@rules_clang_tidy//:aspects.bzl%check",
            "--output_groups=report",
            "--keep_going",
            "--verbose_failures",
        ]),
    ),
)

# lint all targets with default options
#  bazel run //tools:lint
#
# lint with a single check on a single target
#   bazel run //tools:lint -- \
#     --@rules_clang_tidy//:extra-options=--checks='-*,clang-analyzer-core.uninitialized.Assign' \
#     //test:point_test
#
sh_binary(
    name = "clang-tidy",
    srcs = ["clang-tidy.bash"],
)

multirun(
    name = "lint",
    commands = [
        ":clang-tidy",
        ":ruff.lint",
    ],
)

genrule(
    name = "gen-coverage",
    srcs = ["@lcov//:genhtml"],
    outs = ["coverage.bash"],
    cmd = """
echo "#!/bin/bash" > $@
echo "set -euo pipefail" >> $@
echo "" >> $@
echo "cd \\$$BUILD_WORKSPACE_DIRECTORY" >> $@
echo "COVERAGE_DIR=\\"\\$$(bazel info output_path)/_coverage\\"" >> $@
echo "bazel coverage \\$${{@:-//...}}" >> $@
echo "$(execpath @lcov//:genhtml) {options} {report}" >> $@
echo "" >> $@
echo "echo wrote coverage report to" >> $@
echo "echo file://\\$${{COVERAGE_DIR}}/html/index.html" >> $@
""".format(
        options = " ".join([
            "--output-directory \\$${COVERAGE_DIR}/html",
            "--show-details",
            "--function-coverage",
            "--branch-coverage",
            "--title rigid-geometric-algebra",
            "--highlight",
            "--legend",
            "--missed",
            "--demangle-cpp",
            "--dark-mode",
        ]),
        report = "\\$${COVERAGE_DIR}/_coverage_report.dat",
    ),
)

sh_binary(
    name = "coverage",
    srcs = [":coverage.bash"],
    data = ["@lcov//:genhtml"],
)
