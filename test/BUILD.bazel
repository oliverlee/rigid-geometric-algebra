load("@rules_cc//cc:defs.bzl", "cc_test")

package(default_visibility = ["//:__subpackages__"])

cc_library(
    name = "symengine_compat",
    hdrs = ["symengine/compat.hpp"],
    includes = ["."],
    deps = [
        "//rigid_geometric_algebra",
        "@symengine",
    ],
)

cc_binary(
    name = "symengine_example",
    srcs = ["symengine_example.cpp"],
    deps = [":symengine_compat"],
)

cc_binary(
    name = "points_example",
    srcs = ["points_example.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@glaze",
    ],
)

cc_test(
    name = "antiwedge_test",
    size = "small",
    srcs = ["antiwedge_test.cpp"],
    deps = [
        ":symengine_compat",
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "blade_test",
    size = "small",
    srcs = ["blade_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "blade_complement_type_test",
    size = "small",
    srcs = ["blade_complement_type_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
    ],
)

cc_test(
    name = "blade_ordering_test",
    size = "small",
    srcs = ["blade_ordering_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "blade_sum_test",
    size = "small",
    srcs = ["blade_sum_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "blade_type_from_test",
    size = "small",
    srcs = ["blade_type_from_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "common_algebra_type_test",
    size = "small",
    srcs = ["common_algebra_type_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "complement_test",
    size = "small",
    srcs = ["complement_test.cpp"],
    deps = [
        ":symengine_compat",
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "field_identity_test",
    size = "small",
    srcs = ["field_identity_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "get_test",
    size = "small",
    srcs = ["get_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "get_or_test",
    size = "small",
    srcs = ["get_or_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "is_canonical_blade_order_test",
    size = "small",
    srcs = ["is_canonical_blade_order_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "multivector_test",
    size = "small",
    srcs = ["multivector_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "one_test",
    size = "small",
    srcs = ["one_test.cpp"],
    deps = [
        ":symengine_compat",
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "point_test",
    size = "small",
    srcs = ["point_test.cpp"],
    deps = [
        ":symengine_compat",
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "scalar_antiscalar_type_test",
    size = "small",
    srcs = ["scalar_antiscalar_type_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@glaze",
        "@skytest",
    ],
)

cc_test(
    name = "serialization_test",
    size = "small",
    srcs = ["serialization_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@glaze",
        "@skytest",
    ],
)

cc_test(
    name = "sorted_canonical_blades_test",
    size = "small",
    srcs = ["sorted_canonical_blades_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "symengine_multivector_test",
    size = "small",
    srcs = ["symengine_multivector_test.cpp"],
    deps = [
        ":symengine_compat",
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "to_multivector_test",
    size = "small",
    srcs = ["to_multivector_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "unit_hypervolume_test",
    size = "small",
    srcs = ["unit_hypervolume_test.cpp"],
    deps = [
        ":symengine_compat",
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)

cc_test(
    name = "zero_constant_test",
    size = "small",
    srcs = ["zero_constant_test.cpp"],
    deps = [
        "//rigid_geometric_algebra",
        "@skytest",
    ],
)
